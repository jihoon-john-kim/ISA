<#

#[tmp reg (8bits)]   
000000 val_MEM[000]    (for even 29:0)                
001001 val_MEM[000+1]  (for odd 29:0)    
010010 val_MEM[001]    (for even 59:30)
011011 val_MEM[001+1]  (for odd 59:30)
100100 zero
101101 tmp_bit        
110110 tmp_exe                   
111111 tmp_val                   

#[save reg (8bits)]
000000 addr_MEM[0]       
001001 addr_MEM[30]
010010 dx59
011011 bit_parity0
100100 bit_parity1 
101101 bit_parity2 
110110 bit_parity4
111111 bit_parity8

#[cmd]
0 000000 addr_MEM[0:59] #(load word to 111 from MEM[])
1 001001 addr_MEM[0:59] #(save word to MEM[] from 111)
2 010010 addr_cmd     #(101's LSB != 0 then go cmd)
3 011011 $rd $rs       #($rd ^= $rs) 
4 100100 $rd [7:0]     #($rd += 1)
5 101101 $rd [7:0]     #($rd <<  [7:0])
6 110110 $rd [7:0]     #($rd >> [7:0])
7 111111 $rd $rs       #($rd &= $rs)

#>

# [program 1] 
.data
    origin:  .word  29:0         # MEM[29:0]
    #       0 0 0 0 0 B A 9      (given)
    #       8 7 6 5 4 3 2 1      (given)
    w_parity: .word 59:30        # MEM[59:30]
    #       B A 9 8 7 6 5 e      (need to be filled)
    #       4 3 2 f 1 t o z      (need to be filled)

.text
.globl main

main:
    # initiate input data(origin) address
    111000100         # reset 000 (000 = 0)
   
    # initiate output data(w_parity) address 
    100001111         # 001 += 7  (001 = 7)  (001 = 0 0 0 0 0 1 1 1)
    101001010         # 001 << 2  (001 = 28) (001 = 0 0 0 1 1 1 0 0)
    100001010         # 001 += 2  (001 = 30) (001 = 0 0 0 1 1 1 1 0)

    # escaping iteration data(010)
    100010111         # 001 += 7 (010 = 7)   (001 = 0 0 0 0 0 1 1 1) 
    101010011         # 001 << 3 (010 = 56)  (001 = 0 0 1 1 1 0 0 0)
    100010011         # 001 += 3 (010 = 59)  (001 = 0 0 1 1 1 0 1 1)
    
loop:
    # reset
    111011100         # reset bit_parity0    (011 = 0)
    111100100         # reset bit_parity1    (100 = 0) 
    111101100         # reset bit_parity2    (101 = 0)
    111110100         # reset bit_parity4    (110 = 0)
    111111100         # reset bit_parity8    (111 = 0)
    111000100         # reset 000            (000 = 0)
    111001100         # reset 001            (001 = 0)
    111110100         # reset 110            (110 = 0)
    111111100         # reset 111            (111 = 0)

    # value_of_even_MEM(000) -> tmp7 -> tmp0 
    000000             # load data MEM -> 111 (111 = b8 b7 b6 b5 b4 b3 b2 b1)
    011000111         # move 111 -> 000      (000 = b8 b7 b6 b5 b4 b3 b2 b1)
    
    # calculate parity bits so far
    # b1
    100110001         # 110 += 1             (110 = 0 0 0 0 0 0 0 1) 
    111110000         # masking 000 -> 110   (110 = 0 0 0 0 0 0 0 b1)
    011011110         # b1          -> 011
    011100110         # b1          -> 100
    011101110         # b1          -> 101

    # b2
    111110100         # reset 110            (110 = 0) 
    100110001         # 110 += 1             (110 = 0 0 0 0 0 0 0 1) 
    101110001         # 110 << 1             (110 = 0 0 0 0 0 0 1 0)
    111110000         # masking 000 -> 110   (110 = 0 0 0 0 0 0 b2 0)
    110110001         # shift to LSB         (110 = 0 0 0 0 0 0 0 b2)
    011011110         # b12         -> 011
    011100110         # b12         -> 100
    011110110         # b 2         -> 110

    # b3
    111110100         # reset 110             (110 = 0) 
    100110001         # 110 += 1              (110 = 0 0 0 0 0 0 0 1) 
    101110010         # 110 << 2              (110 = 0 0 0 0 0 1 0 0)
    111110000         # masking 000 -> 110    (110 = 0 0 0 0 0 b3 0 0)
    110110010         # shift to LSB          (110 = 0 0 0 0 0 0 0 b3)
    011011110         # b123        -> 011
    011101110         # b1 3        -> 101
    011110110         # b 23        -> 110

    # b4
    111110100         # reset 110             (110 = 0) 
    100110001         # 110 += 1              (110 = 0 0 0 0 0 0 0 1) 
    101110011         # 110 << 3              (110 = 0 0 0 0 1 0 0 0)
    111110000         # masking 000 -> 110    (110 = 0 0 0 0 b4 0 0 0)
    110110011         # shift to LSB          (110 = 0 0 0 0 0 0 0 b4)
    011100110         # b12 4       -> 100
    011101110         # b1 34       -> 101
    011110110         # b 234       -> 110

    # b5
    111110100         # reset 110             (110 = 0) 
    100110001         # 110 += 1              (110 = 0 0 0 0 0 0 0 1) 
    101110100         # 110 << 4              (110 = 0 0 0 1 0 0 0 0)
    111110000         # masking 000 -> 110    (110 = 0 0 0 b5 0 0 0 0)
    110110100         # shift to LSB          (110 = 0 0 0 0 0 0 0 b5)
    011011110         # b123 5      -> 011
    011100110         # b12 45      -> 100
    011111110         # b    5      -> 111

    # b6
    111110100         # reset 110             (110 = 0) 
    100110001         # 110 += 1              (110 = 0 0 0 0 0 0 0 1) 
    101110101         # 110 << 5              (110 = 0 0 1 0 0 0 0 0)
    111110000         # masking 000 -> 110    (110 = 0 0 b6 0 0 0 0 0)
    110110101         # shift to LSB          (110 = 0 0 0 0 0 0 0 b6)
    011011110         # b123 56     -> 011
    011101110         # b1 34 6     -> 101
    011111110         # b    56     -> 111

    # b7
    111110100         # reset 110             (110 = 0) 
    100110001         # 110 += 1              (110 = 0 0 0 0 0 0 0 1) 
    101110110         # 110 << 6              (110 = 0 1 0 0 0 0 0 0)
    111110000         # masking 000 -> 110    (110 = 0 b7 0 0 0 0 0 0)
    110110110         # shift to LSB          (110 = 0 0 0 0 0 0 0 b7)
    011100110         # b12 45 7    -> 100
    011101110         # b1 34 67    -> 101
    011111110         # b    567    -> 111

    # b8
    111110100         # reset 110             (110 = 0) 
    100110001         # 110 += 1              (110 = 0 0 0 0 0 0 0 1) 
    101110111         # 110 << 7              (110 = 1 0 0 0 0 0 0 0)
    111110000         # masking 000 -> 110    (110 = b8 0 0 0 0 0 0 0)
    110110111         # shift to LSB          (110 = 0 0 0 0 0 0 0 b8)
    011011110         # b123 56 8   -> 011
    011110110         # b 234   8   -> 110
    011111110         # b    5678   -> 111

    # reset
    111000100         # reset 000             (000 = 0)
    111110100         # reset 110             (110 = 0)
    111111100         # reset 111             (111 = 0)

    # value_of_odd_MEM(++000) -> tmp7 -> tmp1 
    100000001         # 000 += 1
    000000             # load data MEM -> 111  (111 = 0 0 0 0 0 bB bA b9)
    011001111         # move 111 -> 001       (001 = 0 0 0 0 0 bB bA b9)

    # calculate parity bits so far
    # b9
    100110001         # 110 = 1               (110 = 0 0 0 0 0 0 0 1) 
    111110001         # masking 001 -> 110    (110 = 0 0 0 0 0 0 0 b9)
    011100110         # b12 45 7 9  -> 100
    011110110         # b 234   89  -> 110
    011111110         # b    56789  -> 111

    # bA
    111110100         # reset 110             (110 = 0) 
    100110001         # 110 += 1              (110 = 0 0 0 0 0 0 0 1) 
    101110001         # 110 << 1              (110 = 0 0 0 0 0 0 1 0)
    111110001         # masking 001 -> 110    (110 = 0 0 0 0 0 0 bA 0)
    110110001         # shift to LSB          (110 = 0 0 0 0 0 0 0 bA)
    011101110         # b1 34 67  A -> 101
    011110110         # b 234   89A -> 110
    011111110         # b    56789A -> 111

    # bB
    111110100         # reset 110             (110 = 0) 
    100110001         # 110 += 1              (110 = 0 0 0 0 0 0 0 1) 
    101110010         # 110 << 2              (110 = 0 0 0 0 0 1 0 0)
    111110001         # masking 001 -> 110    (110 = 0 0 0 0 0 bB 0 0)
    110110010         # shift to LSB          (110 = 0 0 0 0 0 0 0 bB)
    011011110         # b123 56 8  B => 011   calculated bit_parity0 
    011100110         # b12 45 7 9 B => 100   calculated bit_parity1 
    011101110         # b1 34 67  AB => 101   calculated bit_parity2 
    011110110         # b 234   89AB => 110   calculated bit_parity4 
    011111110         # b    56789AB => 111   calculated bit_parity8 

    # output
    # value_of_even_MEM(001)
    111110100         # reset 110             (110 = 0) 
    111111100         # reset 111             (111 = 0) 
    100110111         # 110 += 7              (110 = 0 0 0 0 0 1 1 1) 
    101110001         # 110 << 1              (110 = 0 0 0 0 1 1 1 0) 
    111110000         # masking 000 -> 110    (110 = 0 0 0 0 b4 b3 b2 0) 
    111110110         # concatenate  p4       (110 = 0 0 0 0 b4 b3 b2 p4)
    101110001         # 110 << 1              (110 = 0 0 0 b4 b3 b2 p4 0) 
    011111110         # move 110 -> 111       (111 = 0 0 0 b4 b3 b2 p4 0)
    111110100         # reset 110             (110 = 0) 
    100110001         # 110 += 1              (110 = 0 0 0 0 0 0 0 1) 
    111110000         # masking 000 -> 110    (110 = 0 0 0 0 0 0 0 b1)
    111111110         # concatenate b1        (111 = 0 0 0 b4 b3 b2 p4 b1)
    101111001         # 111 << 1              (111 = 0 0 b4 b3 b2 p4 b1 0) 
    111111101         # concatenate p2        (111 = 0 0 b4 b3 b2 p4 b1 p2)
    101111001         # 111 << 1              (111 = 0 b4 b3 b2 p4 b1 p2 0) 
    111111100         # concatenate p1        (111 = 0 b4 b3 b2 p4 b1 p2 p1)
    101111001         # 111 << 1              (111 = b4 b3 b2 p4 b1 p2 p1 0) 
    111111010         # concatenate p0        (111 = b4 b3 b2 p4 b1 p2 p1 p0)
    001001              # store data 111 -> MEM

    # value_of_odd_MEM(++001)
    100001001         # 001 += 1
    111110100         # reset 110             (110 = 0) 
    111111100         # reset 111             (111 = 0) 
    100110111         # 110 += 7              (110 = 0 0 0 0 0 1 1 1) 
    111110001         # masking 001 -> 110    (110 = 0 0 0 0 0 bB bA b9)
    011111110         # move 110 -> 111       (111 = 0 0 0 0 0 bB bA b9)
    101111101         # 111 << 5              (111 = bB bA b9 0 0 0 0 0)
    111110100         # reset 110             (110 = 0) 
    011110000         # move 000 -> 110       (110 = b8 b7 b6 b5 b4 b3 b2 b1)
    110110100         # 111 >> 4              (110 = 0 0 0 0 b8 b7 b6 b5)
    101110001         # 111 << 1              (110 = 0 0 0 b8 b7 b6 b5 0)
    111111110         # concatenate b8-5      (111 = bB bA b9 b8 b7 b6 b5 0)
    111111111         # concatenate p8        (111 = bB bA b9 b8 b7 b6 b5 p8)
    001001               # store data 111 -> MEM
    
    # escape loop
    111110100         # reset 110             (110 = 0) 
    011110001         # move 001 -> 110       (110 = addr_MEM[30])
    011110010         # 110 ^= 010            // addr_MEM[0]^59 == 0 ?
    100000001         # 000 += 1
    100001001         # 001 += 1
    111101100         # reset 101             (101 = 0) 
    011101110         # move 110    -> 101
    010 loop           # if 101 != 0 -> go loop   

exit:
    li $v0, 10          # exit program syscall# 10
    syscall 